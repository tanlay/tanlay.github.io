<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tanlay</title>
  
  <subtitle>一口不能吃成胖子</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-20T00:47:10.756Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>tanlay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7使用kubeadm部署k8s集群</title>
    <link href="http://example.com/post/8fa46076.html"/>
    <id>http://example.com/post/8fa46076.html</id>
    <published>2021-06-19T11:20:00.000Z</published>
    <updated>2021-06-20T00:47:10.756Z</updated>
    
    
    <summary type="html">&lt;p&gt;kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。使用kubeadm能通过两条指令完成一个kubernetes集群的部署：&lt;/p&gt;</summary>
    
    
    
    <category term="容器技术" scheme="http://example.com/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>find命令常用操作</title>
    <link href="http://example.com/post/825cbbd7.html"/>
    <id>http://example.com/post/825cbbd7.html</id>
    <published>2021-06-16T04:00:25.000Z</published>
    <updated>2021-06-16T04:01:42.521Z</updated>
    
    
    <summary type="html">&lt;p&gt;Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。&lt;/p&gt;</summary>
    
    
    
    <category term="系统管理" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="系统命令" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql96主从架构部署</title>
    <link href="http://example.com/post/b9cacce1.html"/>
    <id>http://example.com/post/b9cacce1.html</id>
    <published>2021-06-11T07:17:42.000Z</published>
    <updated>2021-06-11T07:18:40.652Z</updated>
    
    
    <summary type="html">&lt;p&gt;PostgreSql在9.0之后引入了主从的流复制机制，所谓流复制，就是从服务器通过tcp流从主服务器中同步相应的数据。这样当主服务器数据丢失时从服务器中仍有备份。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Postgresql" scheme="http://example.com/tags/Postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql数据库脚本备份</title>
    <link href="http://example.com/post/90c69e95.html"/>
    <id>http://example.com/post/90c69e95.html</id>
    <published>2021-06-11T07:10:07.000Z</published>
    <updated>2021-06-11T07:11:45.175Z</updated>
    
    
    <summary type="html">&lt;p&gt;公司PG数据库做了主从，还需要每天做一个全量备份，保存3份数据存储。由于测试环境和生产环境基础环境不一致，导致备份不正常。排查过程记录。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Postgresql" scheme="http://example.com/tags/Postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Ansible使用记录</title>
    <link href="http://example.com/post/45a1a923.html"/>
    <id>http://example.com/post/45a1a923.html</id>
    <published>2021-06-10T14:53:58.000Z</published>
    <updated>2021-06-11T07:20:42.168Z</updated>
    
    
    <summary type="html">&lt;p&gt;ansible是一种自动化运维工具,基于paramiko开发的,并且基于模块化工作，Ansible是一种集成IT系统的配置管理、应用部署、执行特定任务的开源平台，它是基于python语言，由Paramiko和PyYAML两个关键模块构建。集合了众多运维工具的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能.ansible是基于模块工作的,本身没有批量部署的能力.真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架.ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的.&lt;/p&gt;</summary>
    
    
    
    <category term="系统管理" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Docker实践</title>
    <link href="http://example.com/post/eff924fc.html"/>
    <id>http://example.com/post/eff924fc.html</id>
    <published>2021-06-10T14:52:22.000Z</published>
    <updated>2021-06-10T14:53:35.833Z</updated>
    
    
    <summary type="html">&lt;p&gt;Docker是Docker.Lnc公司开源的一个基于LXC技术之上搭建的Container容器引擎。Docker将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行,就好像在真实的物理机上运行一样。有了Docker，就不用担心环境问题。用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、修改、分享。使用Docker命令可以快速搭建开发运维环境。&lt;/p&gt;</summary>
    
    
    
    <category term="容器技术" scheme="http://example.com/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins发布脚本</title>
    <link href="http://example.com/post/d936a15c.html"/>
    <id>http://example.com/post/d936a15c.html</id>
    <published>2021-06-10T14:50:51.000Z</published>
    <updated>2021-06-11T07:19:57.239Z</updated>
    
    
    <summary type="html">&lt;p&gt;复杂的项目构建中，有不同的主机、不用的应用，如果手工部署，容易出问题。使用jenkins配置不同主机、不同应用，结合ansible通过jenkins界面就可以很简单的完成业务升级、回滚、备份等功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Shell" scheme="http://example.com/categories/Shell/"/>
    
    
    <category term="Shell" scheme="http://example.com/tags/Shell/"/>
    
    <category term="Jenkins" scheme="http://example.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装K8S</title>
    <link href="http://example.com/post/4c5b1a4b.html"/>
    <id>http://example.com/post/4c5b1a4b.html</id>
    <published>2021-06-10T14:49:42.000Z</published>
    <updated>2021-06-10T14:50:28.688Z</updated>
    
    
    <summary type="html">&lt;p&gt;Kubernetes集群拥有一个Kubernetes Master。Kubernetes Master提供集群的独特视角，并且拥有一系列组件，比如Kubernetes API Server。API Server提供可以用来和集群交互的REST端点。master节点包括用来创建和复制Pod的Replication Controller。&lt;/p&gt;</summary>
    
    
    
    <category term="容器技术" scheme="http://example.com/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="K8S" scheme="http://example.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>k8s-一个简单的例子</title>
    <link href="http://example.com/post/d6261197.html"/>
    <id>http://example.com/post/d6261197.html</id>
    <published>2021-06-10T14:48:35.000Z</published>
    <updated>2021-06-10T14:49:12.669Z</updated>
    
    
    <summary type="html">&lt;p&gt;使用k8s部署一个Java WEB应用。该应用运行在Tomcat里的Web App。需要启动两个容器：WEB容器和MySQL容器，并且Web App需要访问MySQL容器。&lt;/p&gt;</summary>
    
    
    
    <category term="容器技术" scheme="http://example.com/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="K8S" scheme="http://example.com/tags/K8S/"/>
    
  </entry>
  
  <entry>
    <title>keepalived双网卡VIP同步漂移</title>
    <link href="http://example.com/post/a817c57b.html"/>
    <id>http://example.com/post/a817c57b.html</id>
    <published>2021-06-10T14:47:09.000Z</published>
    <updated>2021-06-11T07:25:12.842Z</updated>
    
    
    <summary type="html">&lt;p&gt;项目使用nginx做负载均衡，防止有单点故障使用两台nginx并且通过keepalived实现高可用，nginx01的nginx进程停了则自动切换至nginx02，由nginx02提供服务。并且内网和外网是独立分开的，故障时内网和外网实现同步漂移。此时需要使用vrrp_sync_group设置同步漂移组。来达到故障同步漂移。keepalived在组播模式下所有的信息都会向224.0.0.18的组播地址发送，产生众多的无用信息，并且会产生干扰和冲突，所以需要将其组播的模式改为单播。避免局域网内有大量的keepalived造成虚拟路由id的冲突。 单播模式需要关闭vrrp_strict这个选项。单播需要在VIP实例配置段加入单播的源地址和目标地址。&lt;/p&gt;</summary>
    
    
    
    <category term="高可用" scheme="http://example.com/categories/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    
    <category term="Keepalived" scheme="http://example.com/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>Linux配置软件为系统服务</title>
    <link href="http://example.com/post/adf79112.html"/>
    <id>http://example.com/post/adf79112.html</id>
    <published>2021-06-10T14:45:49.000Z</published>
    <updated>2021-06-11T07:26:42.594Z</updated>
    
    
    <summary type="html">&lt;p&gt;通过官网下载NGinx源码安装、部署Tomcat时。每次都是需要手动进入安装目录下管理,很是麻烦.写个脚本实现应用的启动、停止、重载。并可以使用Service或者Systemctl来管理实现开机自启动。&lt;/p&gt;</summary>
    
    
    
    <category term="系统管理" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Shell" scheme="http://example.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用权限</title>
    <link href="http://example.com/post/4f83a66c.html"/>
    <id>http://example.com/post/4f83a66c.html</id>
    <published>2021-06-10T14:44:50.000Z</published>
    <updated>2021-06-11T07:27:37.560Z</updated>
    
    
    <summary type="html">&lt;p&gt;MySQL是由列级别权限存在的。实现了限制用户对表上特定列的访问权限。一般都是实现对表级别不具备访问权限，但是对某些列有访问权限。当然也存在其他情形。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="权限管理" scheme="http://example.com/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis哨兵集群部署</title>
    <link href="http://example.com/post/7b9d5a10.html"/>
    <id>http://example.com/post/7b9d5a10.html</id>
    <published>2021-06-10T14:43:40.000Z</published>
    <updated>2021-06-11T07:29:24.906Z</updated>
    
    
    <summary type="html">&lt;p&gt;单节点redis，如果宕机会不能正常提供服务，此时就需要部署Redis哨兵集群(一主两从三哨兵)来实现高可用&lt;/p&gt;</summary>
    
    
    
    <category term="缓存" scheme="http://example.com/categories/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="NoSQL" scheme="http://example.com/tags/NoSQL/"/>
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ双master集群部署</title>
    <link href="http://example.com/post/dba5179c.html"/>
    <id>http://example.com/post/dba5179c.html</id>
    <published>2021-06-10T14:42:30.000Z</published>
    <updated>2021-06-11T07:29:51.980Z</updated>
    
    
    <summary type="html">&lt;p&gt;Apache RocketMQ是一个分布式消息传递和流媒体平台，具有低延迟、高性能和可靠性、万亿级别的容量和灵活的可伸缩性。&lt;/p&gt;</summary>
    
    
    
    <category term="消息队列" scheme="http://example.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="RocketMQ" scheme="http://example.com/tags/RocketMQ/"/>
    
    <category term="高可用" scheme="http://example.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>vim常用配置</title>
    <link href="http://example.com/post/2a71af52.html"/>
    <id>http://example.com/post/2a71af52.html</id>
    <published>2021-06-10T14:41:18.000Z</published>
    <updated>2021-06-11T07:30:39.240Z</updated>
    
    
    <summary type="html">&lt;p&gt;Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性，常用vim编辑器配置，配置文件如下:&lt;/p&gt;</summary>
    
    
    
    <category term="编辑器" scheme="http://example.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
    <category term="VIM" scheme="http://example.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>磁盘分区挂载parted及LVM操作</title>
    <link href="http://example.com/post/d90482da.html"/>
    <id>http://example.com/post/d90482da.html</id>
    <published>2021-06-10T14:39:53.000Z</published>
    <updated>2021-06-11T07:31:14.120Z</updated>
    
    
    <summary type="html">&lt;p&gt;LVM是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组（volume group），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logical volumes），并进一步在逻辑卷组上创建文件系统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配。当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。&lt;/p&gt;</summary>
    
    
    
    <category term="磁盘管理" scheme="http://example.com/categories/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="LVM" scheme="http://example.com/tags/LVM/"/>
    
  </entry>
  
  <entry>
    <title>使用ansible部署ELK+Filebeat+kafka+Zookeeper</title>
    <link href="http://example.com/post/6aeee3ef.html"/>
    <id>http://example.com/post/6aeee3ef.html</id>
    <published>2021-06-10T14:38:15.000Z</published>
    <updated>2021-06-11T07:30:51.278Z</updated>
    
    
    <summary type="html">&lt;p&gt;日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误。通常，日志被分散的储存不同的设备上。如果你管理数十上百台服务器，你还在使用依次登录每台机器的传统方法查阅日志。这样是不是感觉很繁琐和效率低下。当务之急我们使用集中化的日志管理，例如：开源的syslog，将所有服务器上的日志收集汇总。集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情，一般我们使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。&lt;/p&gt;</summary>
    
    
    
    <category term="ELK" scheme="http://example.com/categories/ELK/"/>
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
    <category term="Kafka" scheme="http://example.com/tags/Kafka/"/>
    
    <category term="Zookeeper" scheme="http://example.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Haproxy配置优化</title>
    <link href="http://example.com/post/9d8f60de.html"/>
    <id>http://example.com/post/9d8f60de.html</id>
    <published>2021-06-10T14:36:22.000Z</published>
    <updated>2021-06-11T07:24:10.749Z</updated>
    
    
    <summary type="html">&lt;p&gt;HAProxy 是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="代理" scheme="http://example.com/categories/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="Haproxy" scheme="http://example.com/tags/Haproxy/"/>
    
  </entry>
  
  <entry>
    <title>Centos7.2网卡bond</title>
    <link href="http://example.com/post/278eb633.html"/>
    <id>http://example.com/post/278eb633.html</id>
    <published>2021-06-10T14:34:26.000Z</published>
    <updated>2021-06-11T07:20:30.221Z</updated>
    
    
    <summary type="html">&lt;p&gt;网卡bond是通过多张网卡绑定成一个逻辑网卡实现本地网卡的冗余，带宽扩容和负载平衡，一共有7种模式&lt;/p&gt;</summary>
    
    
    
    <category term="系统管理" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="网卡Bond" scheme="http://example.com/tags/%E7%BD%91%E5%8D%A1Bond/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络命令的妙用</title>
    <link href="http://example.com/post/95d1ba91.html"/>
    <id>http://example.com/post/95d1ba91.html</id>
    <published>2021-06-10T14:30:15.000Z</published>
    <updated>2021-06-11T07:26:17.880Z</updated>
    
    
    <summary type="html">&lt;p&gt;Linux上很多网络工具可以方便运维人员排查系统问题。如下举例其中几个常用的命令记录使用参数。&lt;/p&gt;</summary>
    
    
    
    <category term="系统管理" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="网络测试" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
